import Head from "next/head";
import { useState, useEffect } from "react";

export const config = {
  api: {
    bodyParser: false,
  },
};

interface Bucket {
  name: string;
  creationDate: string;
}

export default function Home() {
  const [buckets, setBuckets] = useState<Bucket[]>([]);
  const [makeBucketName, setMakeBucketName] = useState<string>("");
  const [makeBucketError, setMakeBucketError] = useState<string>("");
  const [makeBucketRes, setMakeBucketRes] = useState<string>("");

  const [uploadImage, setUploadImage] = useState<File>();
  const [uploadImageURL, setUploadImageURL] = useState<string>();
  const [uploadImageError, setUploadImageError] = useState<string>("");
  const [uploadImageRes, setUploadImageRes] = useState<string>("");
  const [uploadImageBucketName, setUploadImageBucketName] =
    useState<string>("");

  const [getImageError, setGetImageError] = useState<string>("");
  const [getImageRes, setGetImageRes] = useState<string>("");
  const [getImageBucketName, setGetImageBucketName] = useState<string>("");
  const [getImageObjectName, setGetImageObjectName] = useState<string>("");
  const [getImage, setGetImage] = useState<string>("");

  const handleChangeFile = (e: React.ChangeEvent<HTMLInputElement>) => {
    const file = e.target.files?.[0]!;
    setUploadImage(file);
    setUploadImageURL(URL.createObjectURL(file));
  };

  const handleImageUpload = async () => {
    setUploadImageError("");
    setUploadImageRes("");

    if (!uploadImage) {
      setUploadImageError("ファイルを選択してください");
      return;
    }
    if (!uploadImageBucketName) {
      setUploadImageError("バケットを選択・作成してください");
      return;
    }

    const params = new FormData();
    params.append("file", uploadImage);
    params.append("bucketName", uploadImageBucketName);
    params.append("fileName", uploadImage.name);

    await fetch(`/api/images`, {
      method: "POST",
      body: params,
    })
      .then((res) => {
        if (res.status === 200) {
          setUploadImageRes("アップロード成功");
          setUploadImageURL("");
          setUploadImage(undefined);
        }
      })
      .catch((err) => {
        setUploadImageError("アップロード失敗 (" + err + ")");
      });
  };

  const handleGetImage = async () => {
    setGetImageError("");
    setGetImageRes("");

    if (!getImageBucketName) {
      setGetImageError("バケット名を入力してください");
      return;
    }

    await fetch(
      "/api/images/" + getImageBucketName + "/" + getImageObjectName,
      {
        method: "GET",
        headers: {
          "Content-Type": "application/json",
        },
      }
    )
      .then((res) => {
        if (res.status === 200) {
          return res.json();
        }
      })
      .then(async (data) => {
        if (data) {
          console.log(data["imageUrl"]);
          setGetImageRes("画像取得成功");
          setGetImage(data["imageUrl"]);
        }
      })
      .catch((err) => {
        setGetImageError("画像取得失敗 (" + err + ")");
      });
  };

  const handleMakeBucket = async () => {
    setMakeBucketName("");
    if (!makeBucketName) {
      setMakeBucketError("バケット名を入力してください");
      return;
    }
    if (buckets.find((bucket) => bucket.name === makeBucketName)) {
      setMakeBucketError("既に存在するバケット名です");
      return;
    }
    await fetch("/api/buckets", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify({
        bucketName: makeBucketName,
      }),
    })
      .then((res) => {
        if (res.status === 200) {
          setMakeBucketRes("バケット作成成功");
        }
      })
      .catch((err) => {
        setMakeBucketError("バケット作成失敗 (" + err + ")");
      });
  };

  useEffect(() => {
    const getBuckets = async () => {
      const res = await fetch("/api/buckets", {
        method: "GET",
        headers: {
          "Content-Type": "application/json",
        },
      });
      const data = await res.json();
      setBuckets(data);
    };
    getBuckets();
  }, [handleMakeBucket, buckets]);

  useEffect(() => {
    if (buckets.length > 0) {
      setUploadImageBucketName(buckets[0].name);
      setGetImageBucketName(buckets[0].name);
    }
  }, [buckets]);

  return (
    <div>
      <Head>
        <title>Minio Sample</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <div className="bg-black text-white shadow-md h-16 flex items-center justify-center">
        <h1 className="text-3xl font-bold">Minio Sample!</h1>
      </div>
      <div className="flex flex-col items-center justify-center gap-3">
        <div className="flex flex-col items-center justify-center my-5 gap-10 bg-gray-100 p-5 rounded-md shadow-md w-4/5">
          <h2 className="text-2xl font-bold">Image Uploader</h2>
          <input
            type="file"
            id="avatar"
            name="avatar"
            accept="image/png, image/jpeg"
            onChange={(e) => {
              handleChangeFile(e);
            }}
          ></input>
          <div className="flex flex-col items-center justify-center gap-5 bg-gray-200 p-2 rounded-md shadow-md w-3/5">
            <p>Preview</p>
            <img src={uploadImageURL}></img>
          </div>
          <div className="flex flex-col gap-3 justify-center">
            <p>Select Bucket</p>
            <select
              name="buckets"
              id="buckets"
              className="border-2 border-gray-300 p-2 rounded-md"
              onChange={(e) => {
                setUploadImageBucketName(e.target.value);
              }}
            >
              {buckets.map((bucket) => {
                return (
                  <option value={bucket.name} key={bucket.name}>
                    {bucket.name}
                  </option>
                );
              })}
            </select>
          </div>
          <div className="flex flex-col justify-center gap-3">
            <button
              onClick={handleImageUpload}
              className="bg-blue-500 text-white font-bold p-2 rounded-md hover:bg-blue-700"
            >
              Image upload
            </button>
            <p className="text-red-500">{uploadImageError}</p>
            <p className="text-blue-500">{uploadImageRes}</p>
          </div>
        </div>
        <div className="flex flex-col items-center justify-center my-5 gap-10 bg-gray-100 p-5 rounded-md shadow-md w-4/5">
          <h2 className="text-2xl font-bold">Get Image</h2>
          <div className="flex flex-row gap-5">
            <div className="flex flex-col gap-3 justify-center items-center">
              <p>Select Bucket</p>
              <select
                name="getBuckets"
                id="getBuckets"
                className="border-2 border-gray-300 p-2 rounded-md w-full"
                onChange={(e) => {
                  setGetImageBucketName(e.target.value);
                }}
              >
                {buckets.map((bucket) => {
                  return (
                    <option value={bucket.name} key={bucket.name}>
                      {bucket.name}
                    </option>
                  );
                })}
              </select>
            </div>
            <div className="flex flex-col gap-3 justify-center items-center">
              <p>Image Name</p>
              <input
                type="text"
                className="border-2 border-gray-300 p-2 rounded-md w-full"
                onChange={(e) => {
                  setGetImageObjectName(e.target.value);
                }}
              ></input>
            </div>
          </div>
          <div className="flex flex-col justify-center gap-3">
            <button
              onClick={handleGetImage}
              className="bg-blue-500 text-white font-bold p-2 rounded-md hover:bg-blue-700"
            >
              Get Image
            </button>
            <p className="text-red-500">{getImageError}</p>
            <p className="text-blue-500">{getImageRes}</p>
          </div>
          <div className="flex flex-col items-center justify-center gap-5 bg-gray-200 p-2 rounded-md shadow-md w-3/5">
            <p>Preview</p>
            <div>
              <img src={getImage}></img>
            </div>
          </div>
        </div>
        <div className="flex flex-col items-center justify-center my-5 gap-10 bg-gray-100 p-5 rounded-md shadow-md w-4/5">
          <h2 className="text-2xl font-bold">Make Bucket</h2>
          <div className="flex flex-col justify-center items-center">
            <p className="mb-5 text-xl">Buckets</p>
            <div className="flex flex-row flex-wrap justify-center gap-3">
              {buckets.map((bucket, index) => {
                return (
                  <div
                    className="flex flex-col items-center justify-center gap-3 p-2 rounded-md shadow-md bg-gray-300"
                    key={index}
                  >
                    <p className="text-xl">{bucket.name}</p>
                    <p>{bucket.creationDate}</p>
                  </div>
                );
              })}
              {buckets.length === 0 && (
                <div className="flex flex-col items-center justify-center gap-3 p-2 rounded-md shadow-md bg-gray-300">
                  <p className="text-xl">No Buckets Found</p>
                </div>
              )}
            </div>
          </div>
          <input
            type="text"
            id="bucketName"
            name="bucketName"
            placeholder="Bucket Name"
            className="border-2 border-gray-300 p-2 rounded-md"
            value={makeBucketName}
            onChange={(e) => {
              setMakeBucketName(e.target.value);
            }}
          ></input>
          <div className="flex flex-col justify-center gap-3">
            <button
              onClick={handleMakeBucket}
              className="bg-blue-500 text-white font-bold p-2 rounded-md hover:bg-blue-700 w-full"
            >
              Make Bucket
            </button>
            <p className="text-red-500">{makeBucketError}</p>
            <p className="text-blue-500">{makeBucketRes}</p>
          </div>
        </div>
      </div>
    </div>
  );
}
